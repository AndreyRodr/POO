# house.py

class House:

    def __init__(self):
        self.__address = "Av. Paulista, 100"
        self.__owener = None

    def turnOnLights(self):
        print("Turning on the lights...")

    def getAddress(self):
        return self.__address

    def setOwner(self, owner: any):
        self.__owner = owner # dependency injection by setter

    def getOwner(self):
        return self.__owner

# person.py

class Person:

    def __init__(self, name):
        self.__name = name
        self.__local = None

    def enterThePlace(self, local: any):
        local.turnOnLights()

    def indicateTheAddress(self, local: any):
        print(local.getAddress())

    def introduceYourself(self):
        print("Hi, I am {}".format(self.__name))

    def getLocal(self):
        return self.__local

    def setLocal(self, local: any):
        self.__local = local

# __init__.py

from .house import House
from .person import Person

# main.py

from modules import House, Person

mother = Person("Anne")
mothersHouse = House()

# creating the bilateral association:
mother.setLocal(mothersHouse)
mothersHouse.setOwner(mother)

# the house understands that the owner is Anne:
mothersHouse.getOwner().introduceYourself()

# the person understand that the local is Anne's house:
print(mother.getLocal().getAddress())
