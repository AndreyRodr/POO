# Definição
  - O que são?
    - São funções que não dependem de nenhuma variável de instância
  - Como funcionam?
    - Quando invocados executam uma função sem a dependência do conteúdo de um objeto ou a execução da instância de uma classe
      - Conseguem chamar direto qualquer método da classe e manipular campos da classe

# Vantagens
  - Poderiam estar fora da classe...
  - Na classe...
    - Facilita a chamada
    - Facilita as alterações
    - Melhora a escalabilidade do projeto
    - Facilita os testes
    - Torna o sistema mais coerente (sem "vazamentos")

# person.py
class Person:
    @staticmethod
    def verifyName(name):
        return len(name) >= 3 and ' ' not in name

# main.py
from person import Person

# Calling directly from the class
print(Person.verifyName('João'))

# Novo person.py
class Person:
    def __init__(self, name, surname, age):
        if not self.__verifyName(name):
            print("Invalid name")
        self.__name = name
        self.__surname = surname
        self.__age = age

    @staticmethod
    def __verifyName(name):
        return len(name) >= 3 and ' ' not in name

# Novo main.py
from person import Person

p1 = Person('a','da Silva',20) # Error: Invalid name

# Resumo e diferenças: decoradores
  - Método de objeto
    - Sem decorador
  - Método de classe
    - Com decorador @classmethod
  - Método fora de contexto
    - Com decorador @staticmethod

# Resumo e diferenças: argumentos
  - Método de objeto
    - self: precisa que o objeto seja criado
  - Método de classe
    - cls: não necessita receber um objeto
  - Método fora de contexto
    - Ssem argumento: apenas os necessários para o método

# Cuidado!
  - JAVA
    - Usa a palavra-chave static para definir os atributos e métodos de classe
  - Python
    - Um método estático é aquele que não acessa nem um objeto, nem uma classe, devendo ser utilizado o escopo da classe e o decorador @classmethod para se criar atributos e métodos da classe
